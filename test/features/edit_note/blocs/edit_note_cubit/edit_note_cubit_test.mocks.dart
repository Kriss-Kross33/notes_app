// Mocks generated by Mockito 5.4.2 from annotations
// in notes_app/test/features/edit_note/blocs/edit_note_cubit/edit_note_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:errors/errors.dart' as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:notes_app/src/common/notes/domain/domain.dart' as _i4;
import 'package:notes_app/src/features/home/blocs/note_bloc/note_bloc.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNoteState_1 extends _i1.SmartFake implements _i3.NoteState {
  _FakeNoteState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepository extends _i1.Mock implements _i4.NoteRepository {
  MockNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i4.Note>>> fetchAllNotes() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllNotes,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, List<_i4.Note>>>.value(
            _FakeEither_0<_i6.Failure, List<_i4.Note>>(
          this,
          Invocation.method(
            #fetchAllNotes,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i4.Note>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i4.Success>> updateNote(
          {required _i4.Note? note}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [],
          {#note: note},
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i4.Success>>.value(
            _FakeEither_0<_i6.Failure, _i4.Success>(
          this,
          Invocation.method(
            #updateNote,
            [],
            {#note: note},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i4.Success>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i4.Success>> deleteNote({
    required int? id,
    required _i4.Note? note,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [],
          {
            #id: id,
            #note: note,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i4.Success>>.value(
            _FakeEither_0<_i6.Failure, _i4.Success>(
          this,
          Invocation.method(
            #deleteNote,
            [],
            {
              #id: id,
              #note: note,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i4.Success>>);
  @override
  _i5.Stream<List<_i4.Note>> listenNotes() => (super.noSuchMethod(
        Invocation.method(
          #listenNotes,
          [],
        ),
        returnValue: _i5.Stream<List<_i4.Note>>.empty(),
      ) as _i5.Stream<List<_i4.Note>>);
  @override
  _i5.Future<void> syncNotes() => (super.noSuchMethod(
        Invocation.method(
          #syncNotes,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [NoteBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteBloc extends _i1.Mock implements _i3.NoteBloc {
  MockNoteBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.Note> get notes => (super.noSuchMethod(
        Invocation.getter(#notes),
        returnValue: <_i4.Note>[],
      ) as List<_i4.Note>);
  @override
  set notes(List<_i4.Note>? _notes) => super.noSuchMethod(
        Invocation.setter(
          #notes,
          _notes,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.NoteState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNoteState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.NoteState);
  @override
  _i5.Stream<_i3.NoteState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.NoteState>.empty(),
      ) as _i5.Stream<_i3.NoteState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> fetchNotes(_i7.Emitter<_i3.NoteState>? emit) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNotes,
          [emit],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void add(_i3.NoteEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i3.NoteEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i3.NoteState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i3.NoteEvent>(
    _i7.EventHandler<E, _i3.NoteState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(_i7.Transition<_i3.NoteEvent, _i3.NoteState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i7.Change<_i3.NoteState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
