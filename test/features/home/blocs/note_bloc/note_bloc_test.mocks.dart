// Mocks generated by Mockito 5.4.2 from annotations
// in notes_app/test/features/home/blocs/note_bloc/note_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:errors/errors.dart' as _i5;
import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:notes_app/src/common/notes/domain/domain.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepository extends _i1.Mock implements _i3.NoteRepository {
  MockNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i3.Note>>> fetchAllNotes() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllNotes,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i3.Note>>>.value(
            _FakeEither_0<_i5.Failure, List<_i3.Note>>(
          this,
          Invocation.method(
            #fetchAllNotes,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i3.Note>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Success>> updateNote(
          {required _i3.Note? note}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [],
          {#note: note},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Success>>.value(
            _FakeEither_0<_i5.Failure, _i3.Success>(
          this,
          Invocation.method(
            #updateNote,
            [],
            {#note: note},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Success>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Success>> deleteNote({
    required int? id,
    required _i3.Note? note,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [],
          {
            #id: id,
            #note: note,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Success>>.value(
            _FakeEither_0<_i5.Failure, _i3.Success>(
          this,
          Invocation.method(
            #deleteNote,
            [],
            {
              #id: id,
              #note: note,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Success>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Success>> clearNotes() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearNotes,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Success>>.value(
            _FakeEither_0<_i5.Failure, _i3.Success>(
          this,
          Invocation.method(
            #clearNotes,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Success>>);
  @override
  _i4.Stream<List<_i3.Note>> listenNotes() => (super.noSuchMethod(
        Invocation.method(
          #listenNotes,
          [],
        ),
        returnValue: _i4.Stream<List<_i3.Note>>.empty(),
      ) as _i4.Stream<List<_i3.Note>>);
  @override
  _i4.Future<void> syncNotes() => (super.noSuchMethod(
        Invocation.method(
          #syncNotes,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Success>> syncFromCloudToLocalDb() =>
      (super.noSuchMethod(
        Invocation.method(
          #syncFromCloudToLocalDb,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Success>>.value(
            _FakeEither_0<_i5.Failure, _i3.Success>(
          this,
          Invocation.method(
            #syncFromCloudToLocalDb,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Success>>);
}
