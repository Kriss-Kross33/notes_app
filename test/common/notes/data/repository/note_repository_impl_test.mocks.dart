// Mocks generated by Mockito 5.4.2 from annotations
// in notes_app/test/common/notes/data/repository/note_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:authentication_repository/src/authentication_repository.dart'
    as _i6;
import 'package:authentication_repository/src/models/user_model.dart' as _i7;
import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:notes_app/src/common/notes/data/data_sources/note_local_data_source/note_local_data_source.dart'
    as _i4;
import 'package:notes_app/src/common/notes/domain/domain.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSuccess_0 extends _i1.SmartFake implements _i2.Success {
  _FakeSuccess_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_1 extends _i1.SmartFake
    implements _i3.UserCredential {
  _FakeUserCredential_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteLocalDataSource extends _i1.Mock
    implements _i4.NoteLocalDataSource {
  MockNoteLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Note>> fetchAllNotes() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllNotes,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Note>>.value(<_i2.Note>[]),
      ) as _i5.Future<List<_i2.Note>>);
  @override
  _i5.Future<_i2.Success> updateNote({required _i2.Note? note}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [],
          {#note: note},
        ),
        returnValue: _i5.Future<_i2.Success>.value(_FakeSuccess_0(
          this,
          Invocation.method(
            #updateNote,
            [],
            {#note: note},
          ),
        )),
      ) as _i5.Future<_i2.Success>);
  @override
  _i5.Future<void> deleteNote({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Stream<List<_i2.Note>> listenNotes() => (super.noSuchMethod(
        Invocation.method(
          #listenNotes,
          [],
        ),
        returnValue: _i5.Stream<List<_i2.Note>>.empty(),
      ) as _i5.Stream<List<_i2.Note>>);
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i6.AuthenticationRepository {
  MockAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i7.UserModel> get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _i5.Stream<_i7.UserModel>.empty(),
      ) as _i5.Stream<_i7.UserModel>);
  @override
  _i5.Future<void> loginWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> signup({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signup,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  bool isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i5.Future<void> loginWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #loginWithGoogle,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<_i3.UserCredential> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i5.Future<_i3.UserCredential>.value(_FakeUserCredential_1(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
      ) as _i5.Future<_i3.UserCredential>);
  @override
  _i5.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
