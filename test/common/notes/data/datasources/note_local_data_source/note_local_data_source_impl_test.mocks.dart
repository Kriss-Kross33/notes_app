// Mocks generated by Mockito 5.4.2 from annotations
// in notes_app/test/common/notes/data/datasources/note_local_data_source/note_local_data_source_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:isar/isar.dart' as _i2;
import 'package:isar_storage_service/src/isar_storage_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIsar_0 extends _i1.SmartFake implements _i2.Isar {
  _FakeIsar_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IsarStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsarStorageService<T> extends _i1.Mock
    implements _i3.IsarStorageService<T> {
  MockIsarStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Isar> get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _i4.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.getter(#db),
        )),
      ) as _i4.Future<_i2.Isar>);
  @override
  set db(_i4.Future<_i2.Isar>? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<void> initializeStorage(T? node) => (super.noSuchMethod(
        Invocation.method(
          #initializeStorage,
          [node],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Isar> openDB(
          {required List<_i2.CollectionSchema<dynamic>>? schemas}) =>
      (super.noSuchMethod(
        Invocation.method(
          #openDB,
          [],
          {#schemas: schemas},
        ),
        returnValue: _i4.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.method(
            #openDB,
            [],
            {#schemas: schemas},
          ),
        )),
      ) as _i4.Future<_i2.Isar>);
  @override
  _i4.Future<List<T>> fetchNotes() => (super.noSuchMethod(
        Invocation.method(
          #fetchNotes,
          [],
        ),
        returnValue: _i4.Future<List<T>>.value(<T>[]),
      ) as _i4.Future<List<T>>);
  @override
  _i4.Future<void> createNote(T? note) => (super.noSuchMethod(
        Invocation.method(
          #createNote,
          [note],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Stream<List<T>> listenForNotes() => (super.noSuchMethod(
        Invocation.method(
          #listenForNotes,
          [],
        ),
        returnValue: _i4.Stream<List<T>>.empty(),
      ) as _i4.Stream<List<T>>);
  @override
  _i4.Future<void> updateNote(T? note) => (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [note],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<bool> deleteNote(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<void> clearNotes() => (super.noSuchMethod(
        Invocation.method(
          #clearNotes,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
